import React, { useState } from 'react';
import {
    Modal,
    ModalContent,
    ModalHeader,
    ModalBody,
    ModalFooter,
    Input,
    Button,
    CardHeader,
    Card,
    CardBody,
    CardFooter,
} from "@nextui-org/react";
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { Eye, X, EyeOff, MailIcon, CircleX, Check } from 'lucide-react';


interface SignInProps {
    isOpen: boolean;
    onClose: () => void;
    onSignUp: () => void;
}

export function SignIn({ isOpen, onClose, onSignUp }: SignInProps) {
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [isVisible, setIsVisible] = React.useState(false);
    const toggleVisibility = () => setIsVisible(!isVisible);
    const [success, setSuccess] = useState("");
    const [error, setError] = useState("");
    const [loading, setLoading] = useState(false);
    const router = useRouter();

    // const navigateToProfile = () => {
    //     router.push('/reset-password');
    // };

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        setSuccess("");
        setError("");

        try {
            setLoading(true);
            const response = await fetch('/api/auth/sign-in', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ email, password }),
            });

            const user = await response.json();

            if (!response.ok) {
                setError(user.message);
                setLoading(false);

                return;
            }

            setSuccess("Successfully signed in")
            // console.log("User signed in:", user);
            localStorage.setItem('id', user.id);
            localStorage.setItem('avatar', user.avatar);
            localStorage.setItem('first_name', user.first_name);
            localStorage.setItem('last_name', user.last_name);
            localStorage.setItem('email', user.email);
            localStorage.setItem('password', user.password);

            const delay = 1000;

            setTimeout(() => {
                router.push('/');
            }, delay);
        } catch {
            setLoading(false);
            setError("Invalid email or password");
        }
    };

    return (
        <Modal
            placement="center"
            isOpen={isOpen}
            onOpenChange={onClose}
            size="full"
            disableAnimation
            hideCloseButton
        >
            <ModalContent>
                {(onClose) => (
                    <>
                        <ModalHeader>
                            <Link
                                href="#"
                                onClick={onClose}
                                className="flex items-center gap-1 cursor-pointer">
                                <X size={18} className="text-primary" />
                                <small className="text-black font-semibold">Close</small>
                            </Link>
                        </ModalHeader>
                        <ModalBody className="flex justify-center items-center">
                            <Card className="w-96 md:w-[500px] p-6" style={{ maxWidth: '90vw' }}>
                                <CardHeader>
                                    <div className="flex justify-start items-center w-full">
                                        <h2 className="text-primary text-2xl font-bold">SIGN IN</h2>
                                    </div>
                                </CardHeader>
                                <CardBody>
                                    <Link
                                        href="#"
                                        onClick={onSignUp}
                                        className="mb-4 hover:underline"
                                    >
                                        <p>Don&apos;t have an account? <span className="text-primary">Sign up</span></p>
                                    </Link>
                                    <form className="grid gap-y-1" onSubmit={handleSubmit}>
                                        {error && (
                                            <div className="flex items-center gap-2 p-4 text-sm text-red-800 rounded-xl bg-red-50 dark:bg-gray-800">
                                                <CircleX size={20} />{error}
                                            </div>
                                        )}
                                        {success && (
                                            <div className="flex items-center gap-2 p-4 text-sm text-green-800 rounded-lg bg-green-50 dark:bg-gray-800 dark:text-green-400" role="alert">
                                                <Check size={20} />{success}
                                            </div>
                                        )}
                                        <Input
                                            label="Email"
                                            variant="underlined"
                                            id="email"
                                            value={email}
                                            onChange={(e) => setEmail(e.target.value)}
                                            isRequired
                                            endContent={
                                                <MailIcon size={20} className="text-2xl text-primary pointer-events-none flex-shrink-0" />
                                            }
                                        />
                                        <Input
                                            label="Password"
                                            variant="underlined"
                                            id="password"
                                            value={password}
                                            onChange={(e) => setPassword(e.target.value)}
                                            isRequired
                                            endContent={
                                                <button className="focus:outline-none" type="button" onClick={toggleVisibility} aria-label="toggle password visibility">
                                                    {isVisible ? (
                                                        <Eye size={22} className="text-2xl text-primary pointer-events-none" />
                                                    ) : (
                                                        <EyeOff size={22} className="text-2xl text-primary pointer-events-none" />
                                                    )}
                                                </button>
                                            }
                                            type={isVisible ? "text" : "password"}
                                        />
                                        <Button
                                            type="submit"
                                            color="primary"
                                            isLoading={loading}
                                        >
                                            Sign in
                                        </Button>
                                    </form>
                                </CardBody>
                                <CardFooter className="flex justify-end">
                                    <Link
                                        href="/reset-password"
                                        className="cursor-pointer hover:underline">
                                        <p>Forgot your password?</p>
                                    </Link>
                                </CardFooter>
                            </Card>
                        </ModalBody>
                        <ModalFooter>
                        </ModalFooter>
                    </>
                )}
            </ModalContent>
        </Modal >
    );
}