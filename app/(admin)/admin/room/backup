"use client";

import React, { useState } from "react";
import useSWR from "swr";
import {
    Button,
    Input,
    Tooltip,
    Pagination,
    Table,
    TableHeader,
    TableBody,
    TableColumn,
    TableRow,
    TableCell,
    Image,
    useDisclosure,
    Card, CardHeader, CardBody, CardFooter,
} from "@nextui-org/react";
import { FilePenLine, Plus, Search, Trash2Icon, } from "lucide-react";



interface Room {
    id: number;
    title: string;
    description: string;
    image: string;
}

const fetcher = (url: string) => fetch(url).then((res) => res.json());

const RoomTable: React.FC = () => {
    const { isOpen, onOpen, onOpenChange } = useDisclosure(); // For delete modal
    const {
        isOpen: isEditOpen,
        onOpen: onEditOpen,
        onOpenChange: onEditOpenChange,
    } = useDisclosure(); // For update modal
    const {
        data: rooms = [],
        error,
        mutate,
    } = useSWR<Room[]>(`/api/rooms`, fetcher);

    const [page, setPage] = useState(1);
    const rowsPerPage = 5;
    const [searchTerm, setSearchTerm] = useState("");

    const filteredRooms = rooms.filter(room =>
        room.title.toLowerCase().includes(searchTerm.toLowerCase())
    );

    const paginatedUsers = filteredRooms.slice(
        (page - 1) * rowsPerPage,
        page * rowsPerPage
    );

    const pages = Math.ceil(filteredRooms.length / rowsPerPage);

    const [selectedUser, setSelectedUser] = useState<Room | null>(null);
    const [loading, setLoading] = useState(false);
    const [formData, setFormData] = useState({
        first_name: "",
        last_name: "",
        email: "",
        phone: "",
        address: "",
    });


    if (error) return <div>Error loading users</div>;
    if (!rooms.length) return <div>Loading...</div>;

    return (
        <div>
            {/* <CustomToastContainer /> */}
            <div className="flex justify-between mb-4">
                <Input
                    placeholder="Search by first or last name..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-1/2 text-default-600"
                    startContent={<Search size={20} />}
                />
                <Button isIconOnly onPress={onOpen} color="primary">
                    <Plus size={20} />
                </Button>
            </div>
            <div className="mb-4">
                <small className="text-gray-500 dark:text-gray-300">Total {filteredRooms.length} rooms</small>
            </div>
            <Table
                selectionMode="single"
                bottomContent={
                    <div className="flex w-full justify-center">
                        <Pagination
                            isCompact
                            showControls
                            showShadow
                            color="primary"
                            page={page}
                            total={pages}
                            onChange={(page) => setPage(page)}
                        />
                    </div>
                }
                classNames={{
                    wrapper: "min-h-[222px]",
                }}
            >
                <TableHeader>
                    <TableColumn>NAME</TableColumn>
                    <TableColumn>DESCRIPTION</TableColumn>
                    <TableColumn className="text-center">ACTIONS</TableColumn>
                </TableHeader>
                <TableBody>
                    {paginatedUsers.map((user) => (
                        <TableRow key={user.id}>
                            <TableCell>
                                {/* {user.image} {user.title} {user.description} */}
                                <div className="flex items-center space-x-2">
                                    <Image
                                        src={user.image}
                                        alt="Room Image"
                                        width={50}
                                        height={50}
                                        className="object-cover cursor-pointer"
                                    />
                                    <div>
                                        <p className="font-semibold">{user.title}</p>
                                        <small className="text-gray-600">Room # : {user.id}</small>
                                    </div>
                                </div>
                            </TableCell>
                            <TableCell>
                                {user.description}
                            </TableCell>
                            <TableCell>
                                <div className="flex justify-center space-x-2">
                                    <Tooltip content="Edit user">
                                        <span
                                            // onClick={() => handleEditUser(user)}
                                            className="text-lg text-default-400 cursor-pointer active:opacity-50"
                                        >
                                            <FilePenLine size={20} />
                                        </span>
                                    </Tooltip>
                                    <Tooltip color="danger" content="Delete user">
                                        <span
                                            onClick={() => {
                                                setSelectedUser(user);
                                                onOpen();
                                            }}
                                            className="text-lg text-danger cursor-pointer active:opacity-50"
                                        >
                                            <Trash2Icon size={20} />
                                        </span>
                                    </Tooltip>
                                </div>
                            </TableCell>
                        </TableRow>
                    ))}
                </TableBody>
            </Table>
        </div >
    );
};

export default RoomTable;